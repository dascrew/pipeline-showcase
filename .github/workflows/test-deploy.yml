name: Deploy Lambda Function (Test)

on:
  push:
    branches:
      - develop
    paths-ignore:
      - '**/*.yml'
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_database
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r lambda/src/requirements.txt
        pip install psycopg python-dotenv

    # Setup variables for moto testing
    - name: Set environment variables for mock AWS tests
      run: |
        echo "AWS_ACCESS_KEY_ID=fake-access-key-id"
        echo "AWS_SECRET_ACCESS_KEY=fake-secret-access-key"
        echo "AWS_DEFAULT_REGION=eu-west-2"
        echo "AWS_SESSION_TOKEN=testing"
        echo "AWS_SECURITY_TOKEN=testing"

    # Create .env.test file
    - name: Create .env.test file
      run: |
        echo "DB_NAME=test_database" > .env.test
        echo "DB_USER=test_user" >> .env.test
        echo "DB_HOST=localhost" >> .env.test
        echo "DB_PORT=5432" >> .env.test
        echo "DB_PASSWORD=test" >> .env.test

    # Wait for PostgreSQL to be ready
    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
      env:
        PGPASSWORD: test

    # Drop and create database
    - name: Drop and create database
      run: |
        psql -h localhost -p 5432 -U test_user -d postgres -c "DROP DATABASE IF EXISTS test_database;"
        psql -h localhost -p 5432 -U test_user -d postgres -c "CREATE DATABASE test_database;"
      env:
        PGPASSWORD: test

    # Create tables
    - name: Create tables
      run: |
        psql -h localhost -p 5432 -U test_user -d test_database -f db_sql/create_tables.sql
      env:
        PGPASSWORD: test

    # Insert test data
    - name: Insert test data
      run: |
        psql -h localhost -p 5432 -U test_user -d test_database -f db_sql/insert_data.sql
      env:
        PGPASSWORD: test

    # Run Codacy analysis
    - name: Run Codacy Analysis
      uses: codacy/codacy-analysis-cli-action@v4
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        verbose: true
        max-allowed-issues: 50

    # Run pytest
    - name: Test with pytest
      run: |
        pip install pytest
        export PYTHONPATH=$(pwd)
        pytest
